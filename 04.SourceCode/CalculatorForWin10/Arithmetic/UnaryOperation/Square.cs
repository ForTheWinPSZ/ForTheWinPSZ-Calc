using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using static System.Convert;using System.Diagnostics;namespace Arithmetic.UnaryOperation{    public class Square : IUnary    {        private string expressionValue;        private string resultValue;        private int binaryIndex;        private string displayText = "";        private string preResult;        public Square(string expressionValue, string resultValue, string preResult)        {            this.expressionValue = expressionValue;            this.resultValue = resultValue;            this.preResult = preResult;            ChangeResultValue();            ChangeExpression();        }        public void ChangeExpression()        {            if (expressionValue == "" || expressionValue.EndsWith(" "))            {                Debug.WriteLine("结尾是双目");                expressionValue += "sqr(" + ToDouble(displayText) + ")";            }            else            {                Debug.WriteLine("结尾是单目");                string UnaryExpression = GetUnaryExpression().Trim();                string partExpression = expressionValue.Substring(0, binaryIndex + 1);                expressionValue = partExpression + " sqr(" + UnaryExpression + ")";            }        }        public void ChangeResultValue()        {            resultValue = Calculate(displayText = resultValue == "" ? preResult : resultValue);        }        public string Calculate(string param)        {
            //平方
            return (ToDouble(param) * ToDouble(param)).ToString().ToLower();        }        public string ReturnExpressionValue()        {            return expressionValue;        }        public string ReturnResultValue()        {            return resultValue;        }        public string GetUnaryExpression()        {            char[] binary = { '+', '-', '×', '÷' };            binaryIndex = expressionValue.LastIndexOfAny(binary);            return expressionValue.Substring(binaryIndex + 1);        }    }}